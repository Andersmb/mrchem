/** \mainpage The MRGrid program
 *
 * \author Stig Rune Jensen
 *
 * \version 1.0
 *
 * \par Copyright:
 * GPLv4
 *
 */

#include <boost/timer.hpp>

#include "parallel.h"
#include "MREnv.h"
#include "TelePrompter.h"

#include "Atom.h"
#include "Molecule.h"
#include "Intgrl.h"
#include "BoundingBox.h"
#include "NodeIndex.h"
#include "MRGrid.h"
#include "MolecularGridGenerator.h"


using namespace std;

void testGrid();

int main(int argc, char **argv) {
    mpi::environment env(argc, argv);
    mpi::communicator world;
    int rank = world.rank();

    boost::timer delta;
    boost::timer rolex;
    rolex.restart();

    SET_PRINT_PRECISION(15);
    cout << scientific << setprecision(14);

    int k = 5;
    double prec = 1.0e-4;

    MREnv::initializeMRCPP(k, prec);

    testGrid();

    MREnv::finalizeMRCPP(rolex.elapsed());

    return 0;
}

void testGrid() {
    Molecule molecule("diamond_1.xyz");
    molecule.print();

    int k = 3;
    int n = -3;
    int l[3] = {-1,-1,-1};
    int nb[3] = {2,2,2};
    double o[3] = {0.0,0.0,0.0};

    NodeIndex<3> idx(n, l);
    BoundingBox<3> world(idx, nb, o);
    println(0, world);

    MRGrid<3> grid(k, &world);
    println(0, grid);

    //MolecularGridGenerator generator;
    //generator.generateGrid(grid, molecule);

    //println(0, grid);

    //MatrixXd *D = readMatrix("diamond_1.dens");
    Intgrl intgrl("diamond_1.bas");
    //DensExp density(intgrl, *densMat);


    //Projector P;
    //FunctionTree<3> *densTree = P.project(density, grid);

}

