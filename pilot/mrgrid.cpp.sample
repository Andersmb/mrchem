/** \mainpage The MRGrid program
 *
 * \author Stig Rune Jensen
 *
 * \version 1.0
 *
 * \par Copyright:
 * GPLv4
 *
 */

#include <boost/timer.hpp>
#include <Eigen/Core>

#include "parallel.h"
#include "constants.h"
#include "MREnv.h"
#include "TelePrompter.h"

#include "PeriodicTable.h"
#include "Atom.h"
#include "Molecule.h"
#include "MolecularGridGenerator.h"

#include "BoundingBox.h"
#include "NodeIndex.h"
#include "MRGrid.h"
#include "FunctionTree.h"
#include "FunctionProjector.h"
#include "GridAdaptor.h"
#include "MathUtils.h"

#include "Intgrl.h"
#include "DensExp.h"
#include "OrbExp.h"
#include "GaussExp.h"
#include "GaussFunc.h"


using namespace std;
using namespace Eigen;

void testGrid();
void testTrees();

int main(int argc, char **argv) {
    mpi::environment env(argc, argv);
    mpi::communicator world;
    int rank = world.rank();

    boost::timer delta;
    boost::timer rolex;
    rolex.restart();

    SET_PRINT_PRECISION(15);
    cout << scientific << setprecision(14);

    int k = 5;
    double prec = 1.0e-4;

    MREnv::initializeMRCPP(k, prec);

    testGrid();
//    testTrees();

    MREnv::finalizeMRCPP(rolex.elapsed());

    return 0;
}

void testTrees() {
    //Setting up world parameters
    int k = 5;
    int type = Interpol;

    int n = -1;
    int l[3] = {0,-1,-2};
    int nb[3] = {1,2,4};
    double o[3] = {0.0,0.0,0.0};

    //Constructing world box
    NodeIndex<1> idx_1D(n, l);
    BoundingBox<1> world_1D(idx_1D, nb, o);

    //Constructing world box
    NodeIndex<2> idx_2D(n, l);
    BoundingBox<2> world_2D(idx_2D, nb, o);

    //Constructing world box
    NodeIndex<3> idx_3D(n, l);
    BoundingBox<3> world_3D(idx_3D, nb, o);
    println(0, world_3D);

    FunctionTree<1> *tree_1D = new FunctionTree<1>(&world_1D, k, type);
    delete tree_1D;

    FunctionTree<2> *tree_2D = new FunctionTree<2>(&world_2D, k, type);
    delete tree_2D;

    FunctionTree<3> *tree_3D = new FunctionTree<3>(&world_3D, k, type);
    delete tree_3D;
}

void testGrid() {
    // Setting up molecular density expansion
    Molecule molecule("he.xyz");
    molecule.print();

    Intgrl intgrl("he.bas");
    MatrixXd D = MathUtils::readMatrixFile("he.dens");
    DensExp densExp(intgrl, D);

    GaussExp<3> gaussDens = densExp.getAODensExpansion();
    gaussDens.calcScreening(25);
    gaussDens.setScreen(true);

    // Setting up world parameters
    int n = -3;
    int l[3] = {-1,-1,-1};
    int nb[3] = {2,2,2};
    double o[3] = {0.0,0.0,0.0};
    NodeIndex<3> idx(n, l);

    // Constructing world box
    BoundingBox<3> world(idx, nb, o);
    println(0, world);

    // Setting up grid generator
    MolecularGridGenerator generator;
    generator.setUniformScale(-2);
    generator.setAmplitude(2);
    generator.setWidth(2);
    generator.setNuclearDependence(0);

    // Constructing initial grid
    int k = 5;
    MRGrid<3> grid(&world, k);
    generator.generateGrid(grid, molecule);
    println(0, grid);

    bool absPrec = true;
    double thrs = 1.0e-5;
    double maxError = 1.0;
    double charge = (double) molecule.getNElectrons();

    GridAdaptor<3> adaptor(thrs, absPrec);
    FunctionProjector<3> P;

//    XCFun xcFun(2);
//    xcFun.setFunctional("LDA");
//    XCProjector P_en(xcFun, 0);
//    XCProjector P_pot(xcFun, 1);
//    XCProjector P_grad(xcFun, 2);

//    while (maxError > thrs) {
        FunctionTree<3> elDens(grid, Interpol);
//        FunctionTree<3> xcDens(grid, Interpol);
//        FunctionTree<3> xcPot(grid, Interpol);
//        FunctionTree<3> xcGrad(grid, Interpol);

        elDens.setName("Electron density");
//        xcDens.setName("XC energy density");
//        xcPot.setName("XC potential");
//        xcGrad.setName("XC potential gradient");

        println(0, elDens);
        P(elDens, gaussDens);
        println(0, elDens);
//        P_en(xcDens, elDens);
//        P_pot(xcPot, elDens);
//        P_grad(xcGrad, elDens);

//        double estErrorCharge = elDens.estimateError(absPrec);
//        double estErrorEnergy = xcDens.estimateError(absPrec);
//        double estErrorPotential = xcPot.estimateError(absPrec);
//        double estErrorGradient = xcGrad.estimateError(absPrec);

//        maxError = estErrorCharge;
//        maxError = max(maxError, estErrorEnergy);
//        maxError = max(maxError, estErrorPotential);
//        maxError = max(maxError, estErrorGrad);

        double numCharge = elDens.integrate();
        double realError = numCharge - charge;
        if (not absPrec) {
            realError *= 1.0/charge;
        }

        println(0, endl);
//        println(0, "Estimated error gradient    " << estErrorGradient);
//        println(0, "Estimated error potential   " << estErrorPotential);
//        println(0, "Estimated error energy      " << estErrorEnergy);
//        println(0, "Estimated error charge      " << estErrorCharge);
        println(0, "Analytic charge         " << setw(25) << charge);
        println(0, "Integrated charge       " << setw(25) << numCharge);
        println(0, "Integrated error charge " << setw(25) << realError << endl);

//        adaptor.adaptGrid(grid, elDens);
//        adaptor.adaptGrid(grid, xcDens);
//        adaptor.adaptGrid(grid, xcPot);
//        adaptor.adaptGrid(grid, xcGrad);
//    }

    //setting up quadrature data
    MatrixXd points;
    VectorXd weights;
    grid.getQuadPoints(points);
    grid.getQuadWeights(weights);

    int nPoints = weights.size();
    VectorXd values = VectorXd::Zero(weights.size());

    for (int n = 0; n < nPoints; n++) {
        double r[3] = { points(n,0), points(n,1), points(n,2) };
        values(n) = gaussDens.evalf(r);
    }

    double quadCharge = weights.dot(values);
    double quadError = quadCharge - charge;
    if (not absPrec) {
        quadError *= 1.0/charge;
    }


    println(0, grid);
    println(0, "Quadrature points       " << points.rows() << " x " << points.cols());
    println(0, "Quadrature weights      " << weights.size());
    println(0, "Quadrature values       " << values.size() << endl);
    println(0, "Analytic charge         " << setw(25) << charge);
    println(0, "Integrated charge       " << setw(25) << quadCharge);
    println(0, "Integrated charge error " << setw(25) << quadError << endl);
}

