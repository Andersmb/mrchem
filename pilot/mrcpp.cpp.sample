/** \mainpage The MRGrid program
 *
 * \author Stig Rune Jensen
 *
 * \version 1.0
 *
 * \par Copyright:
 * GPLv4
 *
 */

#include <boost/timer.hpp>
#include <Eigen/Core>

#include "parallel.h"
#include "constants.h"
#include "MREnv.h"
#include "TelePrompter.h"
#include "MathUtils.h"

#include "BoundingBox.h"
#include "NodeIndex.h"
#include "MultiResolutionAnalysis.h"
#include "InterpolatingBasis.h"
#include "FunctionTree.h"
#include "FunctionProjector.h"
#include "GridGenerator.h"
#include "WaveletAdaptor.h"

#include "GaussFunc.h"


using namespace std;
using namespace Eigen;

void testTrees();
void testProjection();

int main(int argc, char **argv) {
    mpi::environment env(argc, argv);

    boost::timer rolex;
    rolex.restart();

    SET_PRINT_PRECISION(15);
    cout << scientific << setprecision(14);

    MREnv::initializeMRCPP();

    testTrees();
    testProjection();

    MREnv::finalizeMRCPP(rolex.elapsed());

    return 0;
}

void testTrees() {
    //Setting up world parameters
    int n = -1;
    int l[3] = {0,-1,-2};
    int nb[3] = {1,2,4};

    //Constructing world boxes
    NodeIndex<1> idx_1D(n, l);
    BoundingBox<1> world_1D(idx_1D, nb);

    NodeIndex<2> idx_2D(n, l);
    BoundingBox<2> world_2D(idx_2D, nb);

    NodeIndex<3> idx_3D(n, l);
    BoundingBox<3> world_3D(idx_3D, nb);

    //Setting up scaling basis
    int k = 5;
    InterpolatingBasis basis(k);

    //Setting up MRA
    MultiResolutionAnalysis<1> MRA_1D(world_1D, basis);
    MultiResolutionAnalysis<2> MRA_2D(world_2D, basis);
    MultiResolutionAnalysis<3> MRA_3D(world_3D, basis);

    FunctionTree<1> *tree_1D = new FunctionTree<1>(MRA_1D);
    delete tree_1D;

    FunctionTree<2> *tree_2D = new FunctionTree<2>(MRA_2D);
    delete tree_2D;

    FunctionTree<3> *tree_3D = new FunctionTree<3>(MRA_3D);
    delete tree_3D;
}


void testProjection() {
    // Constructing world box
    int n = -4;
    int l[3] = {-1,-1,-1};
    int nb[3] = {2,2,2};
    NodeIndex<3> idx(n, l);
    BoundingBox<3> world(idx, nb);

    // Initializing MRA
    int k = 7;
    InterpolatingBasis basis(k);
    MultiResolutionAnalysis<3> MRA(world, basis);

    // Constructing analytic function
    double beta = 20.0;
    double alpha = pow(beta/pi, 3.0/2.0);
    double pos[3] = {0.0, 0.0, 0.0};
    int pow[3] = {0, 0, 0};
    GaussFunc<3> f_func(beta, alpha, pos, pow);

    // Initializing tree
    FunctionTree<3> f_tree(MRA);

    // Setting up adaptor
    double prec = 1.0e-5;
    WaveletAdaptor<3> w_adaptor(prec);

    // Setting up projector
    FunctionProjector<3> P(w_adaptor);
    P(f_tree, f_func);

    double integral = f_tree.integrate();
    double sq_norm = f_tree.getSquareNorm();

    println(0, endl);
    println(0, "Integral     " << integral);
    println(0, "Square norm  " << sq_norm);
}

