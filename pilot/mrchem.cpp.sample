/** \mainpage The MRCPP program
 *
 * \author Stig Rune Jensen
 *
 * \version 1.0
 *
 * \par Copyright:
 * GPLv4
 *
 */

#include <Eigen/Core>

#include "mrchem.h"
#include "parallel.h"
#include "constants.h"
#include "MREnv.h"
#include "Timer.h"
#include "TelePrompter.h"
#include "MathUtils.h"
#include "Plot.h"

#include "AnalyticFunction.h"
#include "BoundingBox.h"
#include "NodeIndex.h"
#include "MultiResolutionAnalysis.h"
#include "InterpolatingBasis.h"
#include "FunctionTree.h"
#include "DerivativeOperator.h"
#include "PoissonOperator.h"
#include "HelmholtzOperator.h"
#include "MWProjector.h"
#include "MWAdder.h"
#include "MWMultiplier.h"
#include "GridGenerator.h"
#include "GridCleaner.h"
#include "CopyAdaptor.h"
#include "WaveletAdaptor.h"

#include "PeriodicTable.h"
#include "Molecule.h"
#include "Nucleus.h"
#include "MolPlot.h"

#include "GaussFunc.h"
#include "HydrogenicFunction.h"
#include "NuclearFunction.h"


using namespace std;
using namespace Eigen;

void testProjection();
void testAddition();
void testMultiplication();
void testDerivative();
void testPoisson();
void testSCF();
void testTreeCleaner();

Getkw Input;

template<int D> MultiResolutionAnalysis<D>* initializeMRA();
template<int D> GaussFunc<D>* initializeGauss(const double *pos = 0);

int main(int argc, char **argv) {
    Timer timer;
    MREnv::initializeMRCPP(argc, argv);

    bool run_projection = Input.get<bool>("Pilot.run_projection");
    bool run_addition = Input.get<bool>("Pilot.run_addition");
    bool run_multiplication = Input.get<bool>("Pilot.run_multiplication");
    bool run_derivative = Input.get<bool>("Pilot.run_derivative");
    bool run_poisson = Input.get<bool>("Pilot.run_poisson");
    bool run_scf = Input.get<bool>("Pilot.run_scf");

    if (run_projection) testProjection();
    if (run_addition) testAddition();
    if (run_multiplication) testMultiplication();
    if (run_derivative) testDerivative();
    if (run_poisson) testPoisson();
    if (run_scf) testSCF();

    timer.stop();
    MREnv::finalizeMRCPP(timer);

    return 0;
}

template<int D>
MultiResolutionAnalysis<D>* initializeMRA() {
    // Constructing world box
    int scale = Input.get<int>("World.scale");
    vector<int> corner = Input.getIntVec("World.corner");
    vector<int> boxes = Input.getIntVec("World.boxes");
    NodeIndex<D> idx(scale, corner.data());
    BoundingBox<D> world(idx, boxes.data());

    // Constructing scaling basis
    int order = Input.get<int>("order");
    InterpolatingBasis basis(order);

    // Initializing MRA
    return new MultiResolutionAnalysis<D>(world, basis);
}

template<int D>
GaussFunc<D>* initializeGauss(const double *pos) {
    // Constructing analytic function
    double beta = 20.0;
    double alpha = pow(beta/pi, D/2.0);
    int pow[3] = {0, 0, 0};
    if (pos != 0) {
        return new GaussFunc<D>(beta, alpha, pos, pow);
    } else {
        double o[3] = {0.0, 0.0, 0.0};
        return new GaussFunc<D>(beta, alpha, o, pow);
    }
}

void testProjection() {
    Timer timer;
    TelePrompter::printHeader(0, "Testing MWProjector");

    MultiResolutionAnalysis<3> *MRA = initializeMRA<3>();

    double prec = Input.get<double>("rel_prec");
    MWProjector<3> Q(*MRA, prec);

    auto f = [] (const double *r) -> double {
        const double beta = 100.0;
        const double alpha = pow(beta/pi, 3.0/2.0);;
        const double r_0[3] = {0.0, 0.0, 0.0};
        double R = MathUtils::calcDistance(3, r, r_0);
        return alpha*exp(-beta*R*R);
    };

    FunctionTree<3> *f_tree = Q(f);

    double integral = f_tree->integrate();
    double sq_norm = f_tree->getSquareNorm();

    println(0, " Integral                    " << setw(30) << integral);
    println(0, " Square norm                 " << setw(30) << sq_norm);

    delete f_tree;
    delete MRA;
    timer.stop();
    TelePrompter::printFooter(0, timer, 2);
}

void testAddition() {
    Timer timer;
    TelePrompter::printHeader(0, "Testing MWAdder");

    MultiResolutionAnalysis<3> *MRA = initializeMRA<3>();

    double prec = Input.get<double>("rel_prec");
    GridGenerator<3> G(*MRA);
    MWProjector<3> Q(*MRA, prec);
    MWAdder<3> add(*MRA, prec);

    double f_pos[3] = {0.0, 0.0,  0.1};
    double g_pos[3] = {0.0, 0.0, -0.1};
    GaussFunc<3> *f_func = initializeGauss<3>(f_pos);
    GaussFunc<3> *g_func = initializeGauss<3>(g_pos);

    FunctionTree<3> *f_tree = Q(*f_func);
    FunctionTree<3> *g_tree = Q(*g_func);
    FunctionTree<3> *h_tree = add(1.0, *f_tree, -2.0, *g_tree);

    double integral = h_tree->integrate();
    double sq_norm = h_tree->getSquareNorm();

    println(0, " Integral                    " << setw(30) << integral);
    println(0, " Square norm                 " << setw(30) << sq_norm);

    delete f_tree;
    delete g_tree;
    delete h_tree;
    delete f_func;
    delete g_func;
    delete MRA;
    timer.stop();
    TelePrompter::printFooter(0, timer, 2);
}

void testMultiplication() {
    Timer timer;
    TelePrompter::printHeader(0, "Testing MWMultiplier");

    MultiResolutionAnalysis<3> *MRA = initializeMRA<3>();

    double prec = Input.get<double>("rel_prec");
    MWProjector<3> Q(*MRA, prec);
    MWMultiplier<3> mult(*MRA, prec);

    double f_pos[3] = {0.0, 0.0,  0.1};
    double g_pos[3] = {0.0, 0.0, -0.1};
    GaussFunc<3> *f_func = initializeGauss<3>(f_pos);
    GaussFunc<3> *g_func = initializeGauss<3>(g_pos);

    FunctionTree<3> *f_tree = Q(*f_func);
    FunctionTree<3> *g_tree = Q(*g_func);
    FunctionTree<3> *h_tree = mult(1.0, *f_tree, *g_tree);

    double integral = h_tree->integrate();
    double sq_norm = h_tree->getSquareNorm();

    println(0, " Integral                    " << setw(30) << integral);
    println(0, " Square norm                 " << setw(30) << sq_norm);

    delete f_tree;
    delete g_tree;
    delete h_tree;
    delete f_func;
    delete g_func;
    delete MRA;
}

void testDerivative() {
    TelePrompter::printHeader(0, "Testing derivative operator");
    printout(0, endl);

    Timer tot_t;
    MultiResolutionAnalysis<1> *MRA = initializeMRA<1>();

    double prec = Input.get<double>("rel_prec");
    double proj_prec = prec/10.0;
    double apply_prec = prec;

    MWAdder<1> add(*MRA);
    MWProjector<1> Q(*MRA, proj_prec);
    GridGenerator<1> G(*MRA);
    DerivativeOperator<1> D_x(0, *MRA, 0.0, 0.0);

    auto f = [] (const double *r) -> double {
        const double alpha = 3.0;
        const double r_0[3] = {pi, pi, pi};
        double R = MathUtils::calcDistance(1, r, r_0);
        return exp(-alpha*R);
    };
    auto df = [] (const double *r) -> double {
        const double alpha = 3.0;
        const double r_0[3] = {pi, pi, pi};
        double R = MathUtils::calcDistance(1, r, r_0);
        double sign = 1.0;
        if (r[0] > r_0[0]) sign = -1.0;
        return sign*alpha*exp(-alpha*R);
    };

    Timer proj_t1;
    FunctionTree<1> *f_tree = Q(f);
    proj_t1.stop();
    println(0, " Projecting f      " << proj_t1);

    Timer proj_t2;
    FunctionTree<1> *df_tree = Q(df);
    proj_t2.stop();
    println(0, " Projecting df     " << proj_t2);

    Timer apply_t;
    FunctionTree<1> *dg_tree = G(*f_tree);  // Copy grid from f_tree
    D_x(*dg_tree, *f_tree, 0);              // Does not refine grid further
    apply_t.stop();
    println(0, " Applying D_x      " << apply_t);

    Timer add_t;
    FunctionTree<1> *err_tree = add(1.0, *df_tree, -1.0, *dg_tree);
    add_t.stop();
    println(0, " Computing error   " << add_t << endl);

    double f_int = f_tree->integrate();
    double f_norm = sqrt(f_tree->getSquareNorm());
    double df_int = df_tree->integrate();
    double df_norm = sqrt(df_tree->getSquareNorm());
    double dg_int = dg_tree->integrate();
    double dg_norm = sqrt(dg_tree->getSquareNorm());
    double abs_err = sqrt(err_tree->getSquareNorm());
    double rel_err = abs_err/df_norm;

    TelePrompter::printSeparator(0, '-', 1);
    println(0," f_tree integral:            " << setw(30) << f_int);
    println(0," f_tree norm:                " << setw(30) << f_norm << endl);
    println(0," df_tree integral:           " << setw(30) << df_int);
    println(0," df_tree norm:               " << setw(30) << df_norm << endl);
    println(0," dg_tree integral:           " << setw(30) << dg_int);
    println(0," dg_tree norm:               " << setw(30) << dg_norm << endl);
    println(0," absolute error:             " << setw(30) << abs_err);
    println(0," relative error:             " << setw(30) << rel_err << endl);

    delete f_tree;
    delete df_tree;
    delete dg_tree;
    delete err_tree;
    delete MRA;
    tot_t.stop();
    TelePrompter::printFooter(0, tot_t, 2);
}

void testPoisson() {
    TelePrompter::printHeader(0, "Testing Poisson operator");
    printout(0, endl);

    Timer tot_t;
    MultiResolutionAnalysis<3> *MRA = initializeMRA<3>();

    double prec = Input.get<double>("rel_prec");
    double proj_prec = prec/10.0;
    double build_prec = prec/10.0;
    double apply_prec = prec;

    GridGenerator<3> G(*MRA);
    MWProjector<3> Q(*MRA, proj_prec);

    double beta = 100.0;
    double alpha = pow(beta/pi, 3.0/2.0);
    double pos[3] = {pi/3.0,pi/3.0,pi/3.0};
    GaussFunc<3> f_func(beta, alpha, pos);

    TelePrompter::printHeader(0, "Computing analytic energy");
    Timer analy_t;
    double ana_energy = f_func.calcCoulombEnergy(f_func);
    analy_t.stop();
    TelePrompter::printFooter(0, analy_t, 2);

    TelePrompter::printHeader(0, "Projecting function");
    Timer proj_t;
    FunctionTree<3> *f_tree = G(f_func);
    Q(*f_tree, f_func);
    proj_t.stop();
    TelePrompter::printFooter(0, proj_t, 2);

    TelePrompter::printHeader(0, "Constructing Poisson operator");
    Timer build_t;
    PoissonOperator P(*MRA, apply_prec, build_prec);
    build_t.stop();
    TelePrompter::printFooter(0, build_t, 2);

    TelePrompter::printHeader(0, "Applying Poisson operator");
    Timer apply_t;
    FunctionTree<3> *g_tree = G();
    P(*g_tree, *f_tree);
    apply_t.stop();
    TelePrompter::printFooter(0, apply_t, 2);

    double f_int = f_tree->integrate();
    double f_norm = sqrt(f_tree->getSquareNorm());
    double g_int = g_tree->integrate();
    double g_norm = sqrt(g_tree->getSquareNorm());
    double num_energy = g_tree->dot(*f_tree);
    double error = (num_energy-ana_energy)/num_energy;

    println(0, endl);
    println(0," f_tree integral:            " << setw(30) << f_int);
    println(0," f_tree norm:                " << setw(30) << f_norm << endl);
    println(0," g_tree integral:            " << setw(30) << g_int);
    println(0," g_tree norm:                " << setw(30) << g_norm << endl);
    println(0," Analytic energy:            " << setw(30) << ana_energy);
    println(0," Numerical energy:           " << setw(30) << num_energy);
    println(0," Relative error:             " << setw(30) << error << endl);
    println(0, endl);

    delete f_tree;
    delete g_tree;
    delete MRA;
    tot_t.stop();
    TelePrompter::printFooter(0, tot_t, 2);
}

void testSCF() {
    // Precision parameters
    double prec = Input.get<double>("rel_prec");

    // Computational domain
    int scale = Input.get<int>("World.scale");
    vector<int> corner = Input.getIntVec("World.corner");
    vector<int> boxes = Input.getIntVec("World.boxes");
    NodeIndex<3> idx(scale, corner.data());
    BoundingBox<3> world(idx, boxes.data());

    // MW basis
    int order = Input.get<int>("order");
    InterpolatingBasis basis(order);

    // Initializing MRA
    MultiResolutionAnalysis<3> MRA(world, basis);

    // Initializing projector
    GridGenerator<3> G(MRA);
    MWProjector<3> Q(MRA, prec);

    // Nuclear parameters
    double Z = 1.0;                     // Nuclear charge
    double R[3] = {0.0, 0.0, 0.0};      // Nuclear position

    // Placeholders for functions
    FunctionTree<3> *V;
    FunctionTree<3> *phi_n = 0;
    FunctionTree<3> *phi_np1 = 0;
    FunctionTree<3> *d_phi_n = 0;

    // Orbtial energies
    double epsilon_n = -0.5;
    double epsilon_np1 = 0.0;
    double d_epsilon_n = 0.0;

    {
        Timer timer;
        int oldlevel = TelePrompter::setPrintLevel(10);
        TelePrompter::printHeader(0, "Projecting nuclear potential");

        double c = 0.00435*prec/pow(Z, 5);  // Smoothing parameter
        auto u = [] (double r) -> double {
            return erf(r)/r + 1.0/(3.0*sqrt(pi))*(exp(-r*r) + 16.0*exp(-4.0*r*r));
        };
        auto f = [u, c, Z, R] (const double *r) -> double {
            double x = MathUtils::calcDistance(3, r, R);
            return -1.0*Z*u(x/c)/c;
        };

        V = Q(f);
        timer.stop();
        TelePrompter::printFooter(0, timer, 2);
        TelePrompter::setPrintLevel(oldlevel);
    }

    {
        Timer timer;
        int oldlevel = TelePrompter::setPrintLevel(10);
        TelePrompter::printHeader(0, "Projecting initial guess");

        auto f = [R] (const double *r) -> double {
            double x = MathUtils::calcDistance(3, r, R);
            return 1.0*exp(-1.0*x*x);
        };

        phi_n = Q(f);
        phi_n->normalize();
        timer.stop();
        TelePrompter::printFooter(0, timer, 2);
        TelePrompter::setPrintLevel(oldlevel);
    }

    TelePrompter::printHeader(0, "Running SCF");
    printout(0, " Iter");
    printout(0, "      E_np1          dE_n   ");
    printout(0, "   ||phi_np1||   ||dPhi_n||" << endl);
    TelePrompter::printSeparator(0, '-');

    double scf_prec = 1.0e-3;
    double scf_thrs = prec*10.0;

    int iter = 1;
    double error = 1.0;
    vector<Timer> scf_t;
    while (error > scf_thrs) {
        Timer cycle_t;

        // Adjust precision
        scf_prec = min(scf_prec, error/100.0);
        scf_prec = max(scf_prec, prec);
        
        // Initialize Helmholtz operator
        if (epsilon_n > 0.0) epsilon_n *= -1.0;
        double mu_n = sqrt(-2.0*epsilon_n);
        HelmholtzOperator H(mu_n, MRA, scf_prec);

        // Initialize arithmetic operators
        MWAdder<3> add(MRA, scf_prec);
        MWMultiplier<3> mult(MRA, scf_prec);

        // Compute Helmholtz argument V*phi
        FunctionTree<3> *Vphi = G(*phi_n);  // Copy grid from orbital
        mult(*Vphi, 1.0, *V, *phi_n, 1);    // Relax grid max one level

        // Apply Helmholtz operator phi^n+1 = H[V*phi^n]
        phi_np1 = H(*Vphi);
        *phi_np1 *= -1.0/(2.0*pi);

        // Compute orbital residual
        d_phi_n = G(*phi_np1);                      // Copy grid from phi_np1
        add(*d_phi_n, 1.0, *phi_np1, -1.0, *phi_n); // No grid relaxation
        error = sqrt(d_phi_n->getSquareNorm());

        // Compute energy update
        d_epsilon_n = Vphi->dot(*d_phi_n)/phi_np1->getSquareNorm();
        epsilon_np1 = epsilon_n + d_epsilon_n;

        printout(0, setw(3) << iter);
        TelePrompter::setPrecision(10);
        printout(0, setw(19) << epsilon_np1);
        TelePrompter::setPrecision(1);
        printout(0, setw(9) << d_epsilon_n);
        TelePrompter::setPrecision(10);
        printout(0, setw(19) << phi_np1->getSquareNorm());
        TelePrompter::setPrecision(1);
        printout(0, setw(9) << error);
        TelePrompter::setPrecision(15);
        printout(0, endl);

        delete Vphi;
        delete phi_n;
        delete d_phi_n;

        // Prepare for next iteration
        epsilon_n = epsilon_np1;
        phi_n = phi_np1;
        phi_n->normalize();

        cycle_t.stop();
        scf_t.push_back(cycle_t);
        iter++;
    }
    TelePrompter::printSeparator(0, '=', 2);

    TelePrompter::printHeader(0, "SCF timings");
    for (int i = 0; i < scf_t.size(); i++) {
        println(0, " Time cycle " << setw(5) << i+1 << "  " << scf_t[i]);
    }
    TelePrompter::printSeparator(0, '=', 2);


    TelePrompter::setPrecision(15);
    TelePrompter::printHeader(0, "Final energy");
    println(0, " Orbital energy    " << setw(40) << epsilon_n);
    TelePrompter::printSeparator(0, '=', 2);

    delete phi_n;
    delete V;
}

void testTreeCleaner() {
    Timer timer;
    TelePrompter::printHeader(0, "Testing TreeCleaner");

    MultiResolutionAnalysis<3> *MRA = initializeMRA<3>();
    GaussFunc<3> *f_func = initializeGauss<3>();

    double prec = Input.get<double>("rel_prec");
    MWProjector<3> Q(*MRA);
    GridCleaner<3> C(*MRA, prec);
    GridGenerator<3> G(*MRA);

    FunctionTree<3> *f_tree = G();

    int n_nodes = 1;
    while (n_nodes > 0) {
        Q(*f_tree, *f_func);
        n_nodes = C(*f_tree);
    }
    Q(*f_tree, *f_func);

    double integral = f_tree->integrate();
    double sq_norm = f_tree->getSquareNorm();

    println(0, " Integral                    " << setw(30) << integral);
    println(0, " Square norm                 " << setw(30) << sq_norm);

    delete f_tree;
    delete f_func;
    delete MRA;
    timer.stop();
    TelePrompter::printFooter(0, timer, 2);
}

