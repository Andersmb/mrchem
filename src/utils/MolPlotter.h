/*
 * MRChem, a numerical real-space code for molecular electronic structure
 * calculations within the self-consistent field (SCF) approximations of quantum
 * chemistry (Hartree-Fock and Density Functional Theory).
 * Copyright (C) 2019 Stig Rune Jensen, Luca Frediani, Peter Wind and contributors.
 *
 * This file is part of MRChem.
 *
 * MRChem is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * MRChem is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with MRChem.  If not, see <https://www.gnu.org/licenses/>.
 *
 * For information on the complete list of contributors to MRChem, see:
 * <https://mrchem.readthedocs.io/>
 */

#pragma once

#include "MRCPP/Plotter"
#include "MRCPP/Printer"

#include "chemistry/Molecule.h"
#include "chemistry/Nucleus.h"

namespace mrchem {

class MolPlotter final : public mrcpp::Plotter<3> {
public:
    MolPlotter(Molecule &mol, mrcpp::Coord<3> &o)
            : mrcpp::Plotter<3>(o)
            , molecule(&mol) {}

    void cubePlot(const std::array<int, 3> &npts, QMFunction &func, const std::string &fname) {
        if (func.hasReal()) cubePlot(npts, func.real(), fname + "_re");
        if (func.hasImag()) cubePlot(npts, func.imag(), fname + "_im");
    }

    using Plotter<3>::cubePlot;

protected:
    Molecule *molecule{nullptr};

    void writeCube(const std::array<int, 3> &npts, const Eigen::VectorXd &values) {
        std::ofstream &o = *this->fout;

        auto nNucs = this->molecule->getNNuclei();
        mrcpp::Coord<3> a = calcStep(this->A, npts[0]);
        mrcpp::Coord<3> b = calcStep(this->B, npts[1]);
        mrcpp::Coord<3> c = calcStep(this->C, npts[2]);

        o << "Cube file format" << std::endl;
        o << "Generated by MRChem" << std::endl;

        //	"%5d %12.6f %12.6f %12.6f\n"
        o.setf(std::ios::scientific);
        o.precision(12);
        o << nNucs << " " << this->O[0] << " " << this->O[1] << " " << this->O[2] << std::endl;
        o << npts[0] << " " << a[0] << " " << a[1] << " " << a[2] << std::endl;
        o << npts[1] << " " << b[0] << " " << b[1] << " " << b[2] << std::endl;
        o << npts[2] << " " << c[0] << " " << c[1] << " " << c[2] << std::endl;

        for (auto i = 0; i < nNucs; i++) {
            const auto &nuc = this->molecule->getNuclei()[i];
            const auto &coord = nuc.getCoord();
            auto Z = nuc.getCharge();
            o << static_cast<int>(Z) << Z << coord[0] << "  " << coord[1] << "  " << coord[2] << std::endl;
        }

        for (int n = 0; n < values.size(); n++) {
            o << values[n] << " ";          // 12.5E
            if (n % 6 == 5) o << std::endl; // Line break after 6 values
        }
    }
};

} // namespace mrchem
