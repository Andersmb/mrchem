.. raw:: html

    <style> .red {color:#aa0060; font-weight:bold; font-size:18px} </style>

.. role:: red

.. This documentation was autogenerated using parselglossy. Editing by hand is not recommended.

================
Input parameters
================

- Keywords without a default value are **required**.
- Default values are either explicit or computed from the value of other keywords in the input.
- Sections where all keywords have a default value can be omitted.
- Predicates, if present, are the functions run to validate user input.

:red:`Keywords`
 :rel_prec: Overall relative precision in the calculation. 

  **Type** ``float``

  **Default** ``-1.0``

 :nuc_prec: Precision used in the smoothing and projection of the nuclear potential. 

  **Type** ``float``

  **Default** ``-1.0``

 :abs_prec: Overall absolute precision in the calculation. 

  **Type** ``float``

  **Default** ``-1.0``

 :est_norm: Norm used in translation from abs_prec to rel_prec. 

  **Type** ``float``

  **Default** ``-1.0``

 :energy_unit: Unit used in the translation from abs_prec to rel_prec. 

  **Type** ``str``

  **Default** ``au``

  **Predicates**
    - ``value in ['au', 'kcal', 'kJ']``

 :printlevel: Level of detail in the written output 

  **Type** ``int``

  **Default** ``0``

  **Predicates**
    - ``0 <= value``

 :teletype: Write output to file called mrchem-{mpi-rank}.out. 

  **Type** ``bool``

  **Default** ``False``

:red:`Sections`
 :MPI: Define MPI related parameters. 

  :red:`Keywords`
   :numerically_exact: This will use MPI algorithms that guarantees that the output is invariant wrt the number of MPI processes. 
  
    **Type** ``bool``
  
    **Default** ``False``
  
   :shared_memory_size: Size (MB) of the MPI shared memory blocks of each shared function. 
  
    **Type** ``int``
  
    **Default** ``10000``
  
   :share_nuclear_potential: This will use MPI shared memory for the nuclear potential. 
  
    **Type** ``bool``
  
    **Default** ``False``
  
   :share_coulomb_density: This will use MPI shared memory for the Coulomb density. 
  
    **Type** ``bool``
  
    **Default** ``False``
  
   :share_coulomb_potential: This will use MPI shared memory for the Coulomb potential. 
  
    **Type** ``bool``
  
    **Default** ``False``
  
   :share_xc_density: This will use MPI shared memory for the exchange-correlation density. 
  
    **Type** ``bool``
  
    **Default** ``False``
  
   :share_xc_potential: This will use MPI shared memory for the exchange-correlation potential. 
  
    **Type** ``bool``
  
    **Default** ``False``
  
 :MRA: Define polynomial basis and computational domain. 

  :red:`Keywords`
   :order: Polynomial order of multiwavelet basis. 
  
    **Type** ``int``
  
    **Default** ``-1``
  
   :basis_type: Polynomial type of multiwavelet basis. 
  
    **Type** ``str``
  
    **Default** ``interpolating``
  
    **Predicates**
      - ``value[0].lower() in ['i', 'l']``
  
   :min_scale: Root scale of multiresolution analysis. Size of root boxes is 2^{-min_scale}. 
  
    **Type** ``int``
  
    **Default** ``0``
  
    **Predicates**
      - ``-32 < value < 32``
  
   :max_scale: Maximum refinement scale of multiresolution analysis. 
  
    **Type** ``int``
  
    **Default** ``20``
  
    **Predicates**
      - ``-32 < value < 32``
  
   :boxes: Number of root boxes. 
  
    **Type** ``List[int]``
  
    **Default** ``[1, 1, 1]``
  
    **Predicates**
      - ``0 < value[0] < 8``
      - ``0 < value[1] < 8``
      - ``0 < value[2] < 8``
  
   :corner: Translation of the first root box. 
  
    **Type** ``List[int]``
  
    **Default** ``[0, 0, 0]``
  
   :center_of_mass: Set gauge origin to center of mass. 
  
    **Type** ``bool``
  
    **Default** ``False``
  
   :center_of_charge: Set gauge origin to center of charge. 
  
    **Type** ``bool``
  
    **Default** ``False``
  
   :gauge_origin: Gauge origin. 
  
    **Type** ``List[float]``
  
    **Default** ``[0.0, 0.0, 0.0]``
  
 :Derivatives: Define various derivative operators used in the code. 

  :red:`Keywords`
   :kinetic: Derivative used in kinetic operator. 
  
    **Type** ``str``
  
    **Default** ``abgv_55``
  
   :h_orb: Derivative used in magnetic dipole operator. 
  
    **Type** ``str``
  
    **Default** ``abgv_00``
  
   :h_pso: Derivative used in paramagnetic spin-orbit operator. 
  
    **Type** ``str``
  
    **Default** ``abgv_00``
  
   :dft: Derivative used in exchange-correlation operator. 
  
    **Type** ``str``
  
    **Default** ``abgv_00``
  
 :Molecule: Define molecule. 

  :red:`Keywords`
   :charge: Total charge of molecule.  
  
    **Type** ``int``
  
    **Default** ``0``
  
   :multiplicity: Spin multiplicity of molecule.  
  
    **Type** ``int``
  
    **Default** ``1``
  
   :angstrom: Coordinates given in angstrom rather than bohr. 
  
    **Type** ``bool``
  
    **Default** ``False``
  
   :coords: Coordinates in xyz format. 
  
    **Type** ``str``
  
 :WaveFunction: Define the wavefunction method. 

  :red:`Keywords`
   :method: Wavefunction method (Hartree-Fock or DFT). 
  
    **Type** ``str``
  
   :restricted: Use spin restricted wavefunction. 
  
    **Type** ``bool``
  
    **Default** ``True``
  
 :DFT: Define the exchange-correlation functional in case of DFT. 

  :red:`Keywords`
   :spin: Use spin separated density functionals. 
  
    **Type** ``bool``
  
    **Default** ``not(user['WaveFunction']['restricted'])``
  
   :use_gamma: Express functional derivative through the gradient invariant gamma. 
  
    **Type** ``bool``
  
    **Default** ``False``
  
   :density_cutoff: Hard cutoff for passing density values to XCFun. 
  
    **Type** ``float``
  
    **Default** ``0.0``
  
   :functionals: List of density functionals. 
  
    **Type** ``str``
  
    **Default** `` ``
  
 :Properties: Provide a list of properties to compute. 

  :red:`Keywords`
   :scf_energy: Compute SCF energy. 
  
    **Type** ``bool``
  
    **Default** ``False``
  
   :dipole_moment: Compute dipole moment. 
  
    **Type** ``bool``
  
    **Default** ``False``
  
   :quadrupole_moment: Compute quadrupole moment. 
  
    **Type** ``bool``
  
    **Default** ``False``
  
   :geometry_derivative: Compute geometric derivative. 
  
    **Type** ``bool``
  
    **Default** ``False``
  
   :polarizability: Compute polarizability tensor. 
  
    **Type** ``bool``
  
    **Default** ``False``
  
   :hyperpolarizability: Compute hyperpolarizability tensor. 
  
    **Type** ``bool``
  
    **Default** ``False``
  
   :optical_rotation: Compute optical rotation tensor. 
  
    **Type** ``bool``
  
    **Default** ``False``
  
   :magnetizability: Compute magnetizability tensor. 
  
    **Type** ``bool``
  
    **Default** ``False``
  
   :nmr_shielding: Compute NMR shielding tensors. 
  
    **Type** ``bool``
  
    **Default** ``False``
  
   :spin_spin_coupling: Compute spin-spin coupling tensors. 
  
    **Type** ``bool``
  
    **Default** ``False``
  
   :hyperfine_coupling: Compute hyperfine coupling tensors. 
  
    **Type** ``bool``
  
    **Default** ``False``
  
 :ExternalField: Define an external electromagnetic field. 

  :red:`Keywords`
   :electric_run: Add external electric field. 
  
    **Type** ``bool``
  
    **Default** ``False``
  
   :electric_field: Strength of external electric field. 
  
    **Type** ``List[float]``
  
    **Default** ``[0.0, 0.0, 0.0]``
  
   :magnetic_run: Add external magnetic field. 
  
    **Type** ``bool``
  
    **Default** ``False``
  
   :magnetic_field: Strength of external magnetic field. 
  
    **Type** ``List[float]``
  
    **Default** ``[0.0, 0.0, 0.0]``
  
 :Polarizability: Give details regarding the polarizability calculation. 

  :red:`Keywords`
   :velocity: Use velocity gauge in calculation of polarizability tensor. 
  
    **Type** ``bool``
  
    **Default** ``False``
  
   :frequency: List of external field frequencies. 
  
    **Type** ``List[float]``
  
    **Default** ``[]``
  
   :wavelength: List of external field wavelengths. 
  
    **Type** ``List[float]``
  
    **Default** ``[]``
  
 :SCF: Includes parameters related to the ground state SCF orbital optimization (algorithm using explicit calculation of kinetic energy matrix). 

  :red:`Keywords`
   :run: Run SCF solver. 
  
    **Type** ``bool``
  
    **Default** ``True``
  
   :max_iter: Maximum number of SCF iterations. 
  
    **Type** ``int``
  
    **Default** ``-1``
  
   :kain: Length of KAIN iterative history. 
  
    **Type** ``int``
  
    **Default** ``0``
  
   :rotation: Number of iterations between each diagonalization/localization. 
  
    **Type** ``int``
  
    **Default** ``0``
  
   :canonical: Use canonical or localized orbitals. 
  
    **Type** ``bool``
  
    **Default** ``True``
  
   :orbital_thrs: Convergence threshold for orbtial residuals. 
  
    **Type** ``float``
  
    **Default** ``-1.0``
  
   :property_thrs: Convergence threshold for SCF energy. 
  
    **Type** ``float``
  
    **Default** ``-1.0``
  
   :orbital_prec: Incremental precision in SCF iterations [initial, final] 
  
    **Type** ``List[float]``
  
    **Default** ``[-1.0, -1.0]``
  
   :initial_guess: Type of initial guess. 
  
    **Type** ``str``
  
   :write_orbitals: Write converged orbitals to disk. 
  
    **Type** ``bool``
  
    **Default** ``False``
  
 :KineticFree: Includes parameters related to the ground state SCF optimization (kinetic free algorithm). 

  :red:`Keywords`
   :run: Run kinetic free SCF solver. 
  
    **Type** ``bool``
  
    **Default** ``False``
  
   :max_iter: Maximum number of SCF iterations. 
  
    **Type** ``int``
  
    **Default** ``-1``
  
   :canonical: Use canonical or localized orbitals. 
  
    **Type** ``bool``
  
    **Default** ``True``
  
   :orbital_thrs: Convergence threshold for orbtial residuals. 
  
    **Type** ``float``
  
    **Default** ``-1.0``
  
   :property_thrs: Convergence threshold for SCF energy. 
  
    **Type** ``float``
  
    **Default** ``-1.0``
  
 :Response: Includes parameters related to the response SCF optimization. 

  :red:`Keywords`
   :run: Run response solver. 
  
    **Type** ``bool``
  
    **Default** ``True``
  
   :max_iter: Maximum number of response iterations. 
  
    **Type** ``int``
  
    **Default** ``-1``
  
   :kain: Length of KAIN iterative history. 
  
    **Type** ``int``
  
    **Default** ``0``
  
   :canonical: Use canonical or localized orbitals. 
  
    **Type** ``bool``
  
    **Default** ``True``
  
   :orbital_thrs: Convergence threshold for orbtial residuals. 
  
    **Type** ``float``
  
    **Default** ``-1.0``
  
   :property_thrs: Convergence threshold for SCF energy. 
  
    **Type** ``float``
  
    **Default** ``-1.0``
  
   :directions: Incremental precision in SCF iterations [initial, final] 
  
    **Type** ``List[int]``
  
    **Default** ``[1, 1, 1]``
  
   :orbital_prec: Incremental precision in SCF iterations [initial, final] 
  
    **Type** ``List[float]``
  
    **Default** ``[-1.0, -1.0]``
  
   :initial_guess: Type of initial guess for response. 
  
    **Type** ``str``
  
    **Default** ``none``
  
   :write_orbitals: Write converged perturbed orbitals to disk. 
  
    **Type** ``bool``
  
    **Default** ``False``
  