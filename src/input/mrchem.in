#!/usr/bin/env python

#
# MRChem, a numerical real-space code for molecular electronic structure
# calculations within the self-consistent field (SCF) approximations of quantum
# chemistry (Hartree-Fock and Density Functional Theory).
# Copyright (C) 2019 Stig Rune Jensen, Luca Frediani, Peter Wind and contributors.
#
# This file is part of MRChem.
#
# MRChem is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# MRChem is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with MRChem.  If not, see <https://www.gnu.org/licenses/>.
#
# For information on the complete list of contributors to MRChem, see:
# <https://mrchem.readthedocs.io/>
#

import json
import math
import optparse
import os
import re
import subprocess
import sys
import tempfile
from io import StringIO
from pathlib import Path

# FIXME This will pick up modules when installed
sys.path.append("@CMAKE_INSTALL_PREFIX@/@PYTHON_SITE_INSTALL_DIR@")
sys.path.append('@PROJECT_SOURCE_DIR@/src/chemistry')

from parselglossy.api import parse
from periodictable import PeriodicTable as PT


def main():
    this_path = Path(__file__).parent

    # Parse command line
    executable, dryrun, inp_file_cmd = parse_cmdline()

    in_path = Path(inp_file_cmd)
    tmpl_path = Path('@PROJECT_SOURCE_DIR@/src/input/template.yml')

    # read user input file (JSONDict <- getkw file)
    user_dict = parse(infile=in_path, template=tmpl_path, grammar='getkw')

    # run user defined verification (JSONDict <- JSONDict)
    verify_prec(user_dict)

    # now that all keywords have sensible values,
    # we can translate user input into program input
    program_dict = translate_input(user_dict)

    inp_name, ext_ext = os.path.splitext(inp_file_cmd)
    xfile = inp_name + '.json'
    with open(xfile, 'w') as fd:
        fd.write(json.dumps(program_dict, indent=2))

    if not dryrun:
        cmd = executable + ' ' + xfile
        p = subprocess.call(cmd, shell=True)

def parse_cmdline():
    usage = "usage: %prog [options] [config] inp_file"
    version = "@PROGRAM_VERSION@"
    cmdln = optparse.OptionParser(
        usage=usage, version="%prog {0}".format(version))
    cmdln.add_option(
        '-D',
        '--dryrun',
        action='store_true',
        dest='dryrun',
        default=False,
        help='Only process input')
    cmdln.add_option(
        '-x',
        '--executable',
        action='store',
        dest='executable',
        type='string',
        default='@MRCHEM_EXECUTABLE@',
        help='set executable name')

    opts, args = cmdln.parse_args()

    executable = opts.executable
    dryrun = opts.dryrun

    if (len(args) == 0):
        cmdln.error('Not input file passed!')
        sys.exit(0)
    elif (len(args) == 1):
        inp_file = args[0]
    else:
        cmdln.error('incorrect number of files')
        sys.exit(0)

    return executable, dryrun, inp_file

def verify_prec(user_dict):
  # Overall precision parameters
  if user_dict["rel_prec"] < 0.0:
    if user_dict["est_norm"] < 0.0:
      coords = user_dict["Molecule"]["coords"]
      est_au = estimate_energy(coords)
      if user_dict["energy_unit"].lower() == 'ev':
        user_dict["est_norm"] = 27.2 * est_au
      elif user_dict["energy_unit"].lower() == 'kcal':
        user_dict["est_norm"] = 627.5 * est_au
      elif user_dict["energy_unit"].lower() == 'kj':
        user_dict["est_norm"] = 2625.5 * est_au
      else:
        user_dict["est_norm"] = est_au
      print("\nPrecision is set by energy estimate Z^(5/2)")
    user_dict["rel_prec"] = 10 * user_dict["abs_prec"] / user_dict["est_norm"]
    print("   est_norm  ", user_dict["est_norm"])
    print("   abs_prec  ", user_dict["abs_prec"])
    print("   rel_prec  ", user_dict["rel_prec"])

  if user_dict["est_norm"] < 0.0:
    user_dict["est_norm"] = 1.0

  if user_dict["abs_prec"] < 0.0:
    user_dict["abs_prec"] = user_dict["rel_prec"]

  if user_dict["nuc_prec"] < 0.0:
    user_dict["nuc_prec"] = user_dict["rel_prec"]

  # Set polynomial order based on precision
  if user_dict["MRA"]["order"] < 0:
    prec = user_dict["rel_prec"]
    user_dict["MRA"]["order"] = int(math.ceil(-1.5 * math.log10(prec)))

  # SCF precisions and thresholds
  if user_dict["SCF"]["orbital_prec"][1] < 0.0:
    user_dict["SCF"]["orbital_prec"][1] = user_dict["rel_prec"]
  if user_dict["SCF"]["orbital_prec"][0] < 0.0:
    user_dict["SCF"]["orbital_prec"][0] = user_dict["SCF"]["orbital_prec"][1]
  if user_dict["SCF"]["orbital_thrs"] < 0.0 and user_dict["SCF"]["property_thrs"] < 0.0:
    user_dict["SCF"]["property_thrs"] = user_dict["rel_prec"] / 10
    user_dict["SCF"]["orbital_thrs"] = math.sqrt(user_dict["SCF"]["property_thrs"])

  if user_dict["KineticFree"]["orbital_thrs"] < 0.0 and user_dict["KineticFree"]["property_thrs"] < 0.0:
    user_dict["KineticFree"]["property_thrs"] = user_dict["rel_prec"] / 10
    user_dict["KineticFree"]["orbital_thrs"] = math.sqrt(user_dict["KineticFree"]["property_thrs"])

  if user_dict["Response"]["orbital_prec"][1] < 0.0:
    user_dict["Response"]["orbital_prec"][1] = user_dict["rel_prec"]
  if user_dict["Response"]["orbital_prec"][0] < 0.0:
    user_dict["Response"]["orbital_prec"][0] = user_dict["Response"]["orbital_prec"][1]


def translate_input(user_dict):
  program_dict = {}
  write_mpi(program_dict, user_dict);
  write_mra(program_dict, user_dict);
  write_printer(program_dict, user_dict);
  write_molecule(program_dict, user_dict);
  write_initial_guess(program_dict, user_dict);
  write_scf_calculation(program_dict, user_dict);
  write_rsp_calculations(program_dict, user_dict);
  return program_dict

def write_mpi(program_dict, user_dict):
  program_dict["mpi"] = {
    "numerically_exact": user_dict["MPI"]["numerically_exact"],
    "shared_memory_size": user_dict["MPI"]["shared_memory_size"]
  }

def write_mra(program_dict, user_dict):
  program_dict["mra"] = {
    "basis_type": user_dict["MRA"]["basis_type"][0].lower(),
    "order": user_dict["MRA"]["order"],
    "boxes": user_dict["MRA"]["boxes"],
    "corner": user_dict["MRA"]["corner"],
    "min_scale": user_dict["MRA"]["min_scale"],
    "max_scale": user_dict["MRA"]["max_scale"],
    "scaling_factor": [1.0, 1.0, 1.0]
  }

def write_printer(program_dict, user_dict):
  program_dict["printer"] = user_dict["Printer"]

def write_molecule(program_dict, user_dict):
  AA = 1.0
  if user_dict["Molecule"]["angstrom"]:
      AA = 1.889725989
  coords_raw = user_dict["Molecule"]["coords"]
  coords_dict = []
  for line in coords_raw.split('\n'):
    sp = line.split()
    if len(sp) > 0:
      atom = sp[0].lower()
      x_a, y_a, z_a = list(map(float, sp[1:]))
      xyz_b = [AA * x_a, AA * y_a, AA * z_a]
      coords_dict.append({
        "atom": atom,
        "xyz": xyz_b
      })

  program_dict["molecule"] = {
    "charge": user_dict["Molecule"]["charge"],
    "multiplicity": user_dict["Molecule"]["multiplicity"],
    "coords": coords_dict
  }


def write_initial_guess(program_dict, user_dict):
  guess_str = user_dict["SCF"]["initial_guess"].lower()
  method = guess_str.split('_')[0]
  zeta = 0
  if method == 'sad' or method == 'core':
    zeta_str = guess_str.split('_')[1]
    if zeta_str == 'sz':
      zeta = 1
    elif zeta_str == 'dz':
      zeta = 2
    elif zeta_str == 'tz':
      zeta = 3
    elif zeta_str == 'qz':
      zeta = 4
    else:
      print("Invalid zeta:" + guess_suffix)

  program_dict["initial_guess"] = {
    "guess_prec": user_dict["rel_prec"],
    "restricted": user_dict["WaveFunction"]["restricted"],
    "method": method,
    "zeta": zeta,
    "start_orbitals": "orbitals/phi",
    "final_orbitals": "orbitals/phi",
    "file_basis": "initial_guess/mrchem.bas",
    "file_moa": "initial_guess/mrchem.moa",
    "file_mob": "initial_guess/mrchem.mob",
    "write_orbitals": False
  }

def write_scf_calculation(program_dict, user_dict):
  scf_dict = {
    "scf_prec": user_dict["rel_prec"],
    "localize": not user_dict["SCF"]["canonical"],
    "final_orbitals": "orbitals/phi",
    "write_orbitals": user_dict["SCF"]["write_orbitals"],
  }
  prop_dict = {
   "dipole_moment": {
      "setup_prec": user_dict["rel_prec"],
      "origin": user_dict["MRA"]["gauge_origin"]
    }
  }
  if user_dict["Properties"]["dipole_moment"]:
    scf_dict["properties"] = prop_dict

  if user_dict["SCF"]["run"]:
    scf_dict["orbital_solver"] = {
      "kain": user_dict["SCF"]["kain"],
      "max_iter": user_dict["SCF"]["max_iter"],
      "rotation": user_dict["SCF"]["rotation"],
      "start_prec": user_dict["SCF"]["orbital_prec"][0],
      "final_prec": user_dict["SCF"]["orbital_prec"][1],
      "orbital_thrs": user_dict["SCF"]["orbital_thrs"],
      "property_thrs": user_dict["SCF"]["property_thrs"]
    }
  if user_dict["KineticFree"]["run"]:
    scf_dict["energy_solver"] = {
      "max_iter": user_dict["KineticFree"]["max_iter"],
      "start_prec": user_dict["rel_prec"],
      "final_prec": user_dict["rel_prec"],
      "orbital_thrs": user_dict["KineticFree"]["orbital_thrs"],
      "property_thrs": user_dict["KineticFree"]["property_thrs"]
    }

  fock_dict = {
    "kinetic_operator": {
      "derivative": user_dict["Derivatives"]["kinetic"]
    },
    "nuclear_operator": {
      "proj_prec": user_dict["nuc_prec"],
      "smooth_prec": user_dict["nuc_prec"],
      "shared_memory": user_dict["MPI"]["share_nuclear_potential"]
    }
  }
  if (user_dict["WaveFunction"]["method"].lower() == "hartree" or
      user_dict["WaveFunction"]["method"].lower() == "hf" or
      user_dict["WaveFunction"]["method"].lower() == "dft"):
    fock_dict["coulomb_operator"] = {
      "poisson_prec": user_dict["rel_prec"],
      "shared_memory": user_dict["MPI"]["share_coulomb_potential"]
    }
  if user_dict["WaveFunction"]["method"].lower() == "hf":
    fock_dict["exchange_operator"] = {
      "screen": False,
      "poisson_prec": user_dict["rel_prec"]
    }

  if user_dict["WaveFunction"]["method"].lower() == "dft":
    func_raw = user_dict["DFT"]["functionals"]
    func_dict = []
    exx = False
    for line in func_raw.split('\n'):
      sp = line.split()
      if len(sp) > 0:
        func = sp[0].lower()
        coef = [1.0]
        if len(sp) > 1:
          coef = list(map(float, sp[1:]))
        func_dict.append({
          "name": func,
          "coef": coef[0]
        })
        if func == "exx":
          exx = True
    fock_dict["xc_operator"] = {
      "grid_prec": user_dict["rel_prec"],
      "shared_memory": user_dict["MPI"]["share_xc_potential"],
      "xc_functional": {
        "spin": user_dict["DFT"]["spin"],
        "gamma": user_dict["DFT"]["use_gamma"],
        "cutoff": user_dict["DFT"]["density_cutoff"],
        "derivative": user_dict["Derivatives"]["dft"],
        "functionals": func_dict
      }
    }
    if exx:
      fock_dict["exchange_operator"] = {
        "screen": False,
        "poisson_prec": user_dict["rel_prec"]
      }
  if user_dict["ExternalField"]["electric_run"]:
    fock_dict["external_operator"] = {
      "electric_field": user_dict["ExternalField"]["electric_field"],
      "origin": user_dict["MRA"]["gauge_origin"]
    }
  if user_dict["ExternalField"]["magnetic_run"]:
    fock_dict["external_operator"] = {
      "magnetic_field": user_dict["ExternalField"]["magnetic_field"],
      "origin": user_dict["MRA"]["gauge_origin"]
    }

  scf_dict["fock_operator"] = fock_dict
  program_dict["scf_calculation"] = scf_dict

def write_rsp_calculations(program_dict, user_dict):
  program_dict["rsp_calculations"] = []

  if user_dict["Properties"]["polarizability"]:
    for omega in user_dict["Polarizability"]["frequency"]:
      rsp_dict = {
        "rsp_prec": user_dict["rel_prec"],
        "localize": not user_dict["Response"]["canonical"],
        "dynamic": (omega > 1.0e-12),
        "final_orbitals": "orbitals/phi_x",
        "write_orbitals": user_dict["Response"]["write_orbitals"],
        "perturbation": {
          "operator": "h_e_dip",
          "origin": user_dict["MRA"]["gauge_origin"]
        }
      }
      prop_dict = {
       "polarizability": {
          "setup_prec": user_dict["rel_prec"],
          "origin": user_dict["MRA"]["gauge_origin"]
        }
      }
      rsp_dict["properties"] = prop_dict

      if user_dict["Response"]["run"]:
        rsp_dict["rsp_solver"] = {
          "frequency": omega,
          "kain": user_dict["Response"]["kain"],
          "max_iter": user_dict["Response"]["max_iter"],
          "start_prec": user_dict["Response"]["orbital_prec"][0],
          "final_prec": user_dict["Response"]["orbital_prec"][1],
          "directions": user_dict["Response"]["directions"],
          "orbital_thrs": user_dict["Response"]["orbital_thrs"],
          "property_thrs": user_dict["Response"]["property_thrs"]
        }

      fock_0_dict = {
        "kinetic_operator": {
          "derivative": user_dict["Derivatives"]["kinetic"]
        },
        "nuclear_operator": {
          "proj_prec": user_dict["nuc_prec"],
          "smooth_prec": user_dict["nuc_prec"],
          "shared_memory": user_dict["MPI"]["share_nuclear_potential"]
        }
      }
      if (user_dict["WaveFunction"]["method"].lower() == "hartree" or
          user_dict["WaveFunction"]["method"].lower() == "hf" or
          user_dict["WaveFunction"]["method"].lower() == "dft"):
        fock_0_dict["coulomb_operator"] = {
          "poisson_prec": user_dict["rel_prec"],
          "shared_memory": user_dict["MPI"]["share_coulomb_potential"]
        }
      if user_dict["WaveFunction"]["method"].lower() == "hf":
        fock_0_dict["exchange_operator"] = {
          "screen": False,
          "poisson_prec": user_dict["rel_prec"]
        }

      if user_dict["WaveFunction"]["method"].lower() == "dft":
        func_raw = user_dict["DFT"]["functionals"]
        func_dict = []
        exx = False
        for line in func_raw.split('\n'):
          sp = line.split()
          if len(sp) > 0:
            func = sp[0].lower()
            coef = [1.0]
            if len(sp) > 1:
              coef = list(map(float, sp[1:]))
            func_dict.append({
              "name": func,
              "coef": coef[0]
            })
            if func == "exx":
              exx = True
        fock_0_dict["xc_operator"] = {
          "grid_prec": user_dict["rel_prec"],
          "shared_memory": user_dict["MPI"]["share_xc_potential"],
          "xc_functional": {
            "spin": user_dict["DFT"]["spin"],
            "gamma": user_dict["DFT"]["use_gamma"],
            "cutoff": user_dict["DFT"]["density_cutoff"],
            "derivative": user_dict["Derivatives"]["dft"],
            "functionals": func_dict
          }
        }
        if exx:
          fock_0_dict["exchange_operator"] = {
            "screen": False,
            "poisson_prec": user_dict["rel_prec"]
          }
      fock_1_dict = {}
      if (user_dict["WaveFunction"]["method"].lower() == "hartree" or
          user_dict["WaveFunction"]["method"].lower() == "hf" or
          user_dict["WaveFunction"]["method"].lower() == "dft"):
        fock_1_dict["coulomb_operator"] = {
          "poisson_prec": user_dict["rel_prec"],
          "shared_memory": user_dict["MPI"]["share_coulomb_potential"]
        }
      if user_dict["WaveFunction"]["method"].lower() == "hf":
        fock_1_dict["exchange_operator"] = {
          "screen": False,
          "poisson_prec": user_dict["rel_prec"]
        }

      if user_dict["WaveFunction"]["method"].lower() == "dft":
        func_raw = user_dict["DFT"]["functionals"]
        func_dict = []
        exx = False
        for line in func_raw.split('\n'):
          sp = line.split()
          if len(sp) > 0:
            func = sp[0].lower()
            coef = [1.0]
            if len(sp) > 1:
              coef = list(map(float, sp[1:]))
            func_dict.append({
              "name": func,
              "coef": coef[0]
            })
            if func == "exx":
              exx = True
        fock_1_dict["xc_operator"] = {
          "grid_prec": user_dict["rel_prec"],
          "shared_memory": user_dict["MPI"]["share_xc_potential"],
          "xc_functional": {
            "spin": user_dict["DFT"]["spin"],
            "gamma": user_dict["DFT"]["use_gamma"],
            "cutoff": user_dict["DFT"]["density_cutoff"],
            "derivative": user_dict["Derivatives"]["dft"],
            "functionals": func_dict
          }
        }
        if exx:
          fock_1_dict["exchange_operator"] = {
            "screen": False,
            "poisson_prec": user_dict["rel_prec"]
          }

        rsp_dict["fock_operator_0"] = fock_0_dict
        rsp_dict["fock_operator_1"] = fock_1_dict
        program_dict["rsp_calculations"].append(rsp_dict)

# Estimate total energy of a moleucule as the sum of the nuclear charges
# to the power Z^(5/2). This is to get an order of magnitude estimate that
# is used to set the precision parameter in mrchem in case of abs_prec.
def estimate_energy(coords):
  est_en = 0.0
  for line in coords.split('\n'):
    sp = line.split()
    if len(sp) > 0:
      elm = sp[0].lower()
      Z = PT[elm].Z
      est_en += pow(Z, 2.5)
  return est_en

if __name__ == '__main__':
    main()
